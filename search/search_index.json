{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"gradle refreshVersions \u00b6 it\u2019s the best","title":"Overview"},{"location":"#gradle-refreshversions","text":"it\u2019s the best","title":"gradle refreshVersions"},{"location":"CHANGELOG/","text":"Change log for refreshVersions \u00b6 Version 0.9.7 (2020-10-16) \u00b6 Fixes \u00b6 Running the refreshVersions task twice or more would fail with \u201cexecutor rejected\u201d as an error message, until the Gradle daemon is killed. This has now been fixed. (Issue #263) The refreshVersions task was failing after the latest Gradle release candidate was superseded by the stable release because the API would return an empty JSON object after this, which we didn\u2019t expect. (Minor) We fixed a typo in a diagnostic task name ( refreshVersionsDependenciesMapping ) Version 0.9.6 (2020-10-12) \u00b6 Fixes \u00b6 This release fixes a major memory leak that would make Gradle Daemons unusable after several builds (or Gradle syncs/imports). We are very sorry for that issue, and the annoyance it might have caused. We experienced it too as users, and that\u2019s why we are bringing the fix now. We took the necessary measures to avoid future recurrence of such memory leaks. Fix of a bug that\u2019d make the first Gradle sync after adding a dependency fail. Breaking change \u00b6 If you were using Jetpack Compose, the compiler dependency had its maven coordinates changed in version 1.0.0-alpha04. We updated the AndroidX.compose.compiler dependency constant, which means it now works only for Compose 1.0.0-alpha04 and more future versions. New dependency constants \u00b6 Google.android.playServices.mlKit Google.mlKit KotlinX.serialization.json Deprecated \u00b6 Firebase ML Kit has been rebranded to Google ML Kit along with API and feature changes since 2020-08-14 update , so we deprecated the Firebase.mlKit dependencies and introduced new ones in Google.android.playServices.mlKit and Google.mlKit . New features \u00b6 refreshVersions will now warn you when Gradle is not up to date, and will give you the commands to run to update it for you to copy/paste and run. It works if you\u2019re using a release candidate, and also if you\u2019re using a nightly version! Version 0.9.5 (2020-08-21) \u00b6 This is a major release that brings surface-level and internal changes, paving the way for the upcoming 1.0 release. The plugin setup/bootstrap has changed , so check out the updated documentation in Setup . New features \u00b6 Self update discovery. RefreshVersions will check for its own updates , and add available comments in the settings.gradle[.kts] file if needed for easy upgrade. This allows you to get future improvements conveniently. Support for buildscript dependencies. It now works just like regular dependencies. First class support for buildSrc Support maven repositories with basic authentication (aka. credentials with username and password) Going forward, refreshVersions will be able to auto-migrate any breaking changes a new version would introduce in your versions.properties , build.gradle and build.gradle.kts files in. This version of refreshVersions integrates the facility to let future versions of refreshVersions that migration is needed, and from which version. This is a very important change that ensures you can keep your projects updated with the least effort possible. New dependency constants \u00b6 Kotlin.stdlib (for the base version of the stdlib) KotlinX: html Coroutines: reactive reactor rx2 rx3 Serialization: core (replaces runtime artifacts since 1.0.0-RC) protobuf cbor properties io reflect.lite nodeJs COIL , a **Co**routine **I**mage **L**oader for Android. Square: LeakCanary KotlinPoet Wire SqlDelight Moshi Picasso okio Retrofit2: Adapter: java8 (renamed from retrofitJava8) rxJava1 (renamed from retrofitRxJava1) rxJava2 (renamed from retrofitRxJava2) rxJava3 KoTest (in the Testing object) CashApp: sqlDelight (alias to Square.sqlDelight) turbine Copper Google: Dagger (including hilt for Android) Android: browserHelper JakeWharton: picnic wormholeGradlePlugin confundusGradlePlugin moshi.shimo AndroidX: Gaming Hilt startup tracing vectorDrawableSeekable Window Core: animation animationTesting Security: cryptoKtx identityCredential Compose: Runtime: dispatch savedInstance liveData rxJava2 Animation Ui Foundation Material Media2: lifecycle Concurrent: futuresKtx Dependency constants renamed \u00b6 Several dependencies constants have been renamed in this release (compared to version 0.9.4). If you were using one of the following, you\u2019ll need to migrate these usages. We recommend to use \u201cReplace in Path\u201d in IntelliJ or Android Studio, filtering for the *.gradle.kts or *.gradle file extensions to do these replacements with ease. Note that for future versions, refreshVersions will be able to do this automatically. Here\u2019s the list of renamed dependency constants: AndroidX.coreKtx -> AndroidX.core.ktx AndroidX.coreRole -> AndroidX.core.role Square.retrofit2.adapter.retrofitJava8 -> Square.retrofit2.adapter.java8 Square.retrofit2.adapter.retrofitRxJava1 -> Square.retrofit2.adapter.rxJava1 Square.retrofit2.adapter.retrofitRxJava2 -> Square.retrofit2.adapter.rxJava2 Testing.junit.junitJupiter -> Testing.junit Testing.mockK.mockK -> Testing.mockK Changes \u00b6 Make the refreshVersions task cancellable during network requests. Now, only http 404 and 401 responses from repositories will be silent. Server errors (i.e. all but http 404 and 401 responses) are now reported. Network failures are now reported. There is now a connection timeout (10 seconds per request for now) An error is reported if a dependency wasn\u2019t found in any of the configured repositories. All the searched repositories are now listed if a dependency wasn\u2019t found in any of them. Only declared repositories are now looked up. (Before, refreshVersions would search all dependencies in all repositories of all modules and their buildscript, regardless of which module was declaring them.) Dependency constants in Ktor no longer uses the native suffixed artifacts (because Kotlin 1.4 drops them, as the main ones become multiplatform) Fixes \u00b6 Version sorting would crash if a version had a long number in it. This has now been fixed, any length of digit sequence is now supported in versions. Fix maven coordinates of several dependency constants Don\u2019t crash on repositories that are not https or file or have non password credentials. The AndroidX.test.ext.jankTestHelper constant and few other ones in Firebase.mlKit had wrong maven coordinates. This has been fixed, and tests have been added to prevent it from happening again on any dependency constant we provide. Previous releases \u00b6 Change log","title":"Change Log"},{"location":"CHANGELOG/#change-log-for-refreshversions","text":"","title":"Change log for refreshVersions"},{"location":"CHANGELOG/#version-097-2020-10-16","text":"","title":"Version 0.9.7 (2020-10-16)"},{"location":"CHANGELOG/#fixes","text":"Running the refreshVersions task twice or more would fail with \u201cexecutor rejected\u201d as an error message, until the Gradle daemon is killed. This has now been fixed. (Issue #263) The refreshVersions task was failing after the latest Gradle release candidate was superseded by the stable release because the API would return an empty JSON object after this, which we didn\u2019t expect. (Minor) We fixed a typo in a diagnostic task name ( refreshVersionsDependenciesMapping )","title":"Fixes"},{"location":"CHANGELOG/#version-096-2020-10-12","text":"","title":"Version 0.9.6 (2020-10-12)"},{"location":"CHANGELOG/#fixes_1","text":"This release fixes a major memory leak that would make Gradle Daemons unusable after several builds (or Gradle syncs/imports). We are very sorry for that issue, and the annoyance it might have caused. We experienced it too as users, and that\u2019s why we are bringing the fix now. We took the necessary measures to avoid future recurrence of such memory leaks. Fix of a bug that\u2019d make the first Gradle sync after adding a dependency fail.","title":"Fixes"},{"location":"CHANGELOG/#breaking-change","text":"If you were using Jetpack Compose, the compiler dependency had its maven coordinates changed in version 1.0.0-alpha04. We updated the AndroidX.compose.compiler dependency constant, which means it now works only for Compose 1.0.0-alpha04 and more future versions.","title":"Breaking change"},{"location":"CHANGELOG/#new-dependency-constants","text":"Google.android.playServices.mlKit Google.mlKit KotlinX.serialization.json","title":"New dependency constants"},{"location":"CHANGELOG/#deprecated","text":"Firebase ML Kit has been rebranded to Google ML Kit along with API and feature changes since 2020-08-14 update , so we deprecated the Firebase.mlKit dependencies and introduced new ones in Google.android.playServices.mlKit and Google.mlKit .","title":"Deprecated"},{"location":"CHANGELOG/#new-features","text":"refreshVersions will now warn you when Gradle is not up to date, and will give you the commands to run to update it for you to copy/paste and run. It works if you\u2019re using a release candidate, and also if you\u2019re using a nightly version!","title":"New features"},{"location":"CHANGELOG/#version-095-2020-08-21","text":"This is a major release that brings surface-level and internal changes, paving the way for the upcoming 1.0 release. The plugin setup/bootstrap has changed , so check out the updated documentation in Setup .","title":"Version 0.9.5 (2020-08-21)"},{"location":"CHANGELOG/#new-features_1","text":"Self update discovery. RefreshVersions will check for its own updates , and add available comments in the settings.gradle[.kts] file if needed for easy upgrade. This allows you to get future improvements conveniently. Support for buildscript dependencies. It now works just like regular dependencies. First class support for buildSrc Support maven repositories with basic authentication (aka. credentials with username and password) Going forward, refreshVersions will be able to auto-migrate any breaking changes a new version would introduce in your versions.properties , build.gradle and build.gradle.kts files in. This version of refreshVersions integrates the facility to let future versions of refreshVersions that migration is needed, and from which version. This is a very important change that ensures you can keep your projects updated with the least effort possible.","title":"New features"},{"location":"CHANGELOG/#new-dependency-constants_1","text":"Kotlin.stdlib (for the base version of the stdlib) KotlinX: html Coroutines: reactive reactor rx2 rx3 Serialization: core (replaces runtime artifacts since 1.0.0-RC) protobuf cbor properties io reflect.lite nodeJs COIL , a **Co**routine **I**mage **L**oader for Android. Square: LeakCanary KotlinPoet Wire SqlDelight Moshi Picasso okio Retrofit2: Adapter: java8 (renamed from retrofitJava8) rxJava1 (renamed from retrofitRxJava1) rxJava2 (renamed from retrofitRxJava2) rxJava3 KoTest (in the Testing object) CashApp: sqlDelight (alias to Square.sqlDelight) turbine Copper Google: Dagger (including hilt for Android) Android: browserHelper JakeWharton: picnic wormholeGradlePlugin confundusGradlePlugin moshi.shimo AndroidX: Gaming Hilt startup tracing vectorDrawableSeekable Window Core: animation animationTesting Security: cryptoKtx identityCredential Compose: Runtime: dispatch savedInstance liveData rxJava2 Animation Ui Foundation Material Media2: lifecycle Concurrent: futuresKtx","title":"New dependency constants"},{"location":"CHANGELOG/#dependency-constants-renamed","text":"Several dependencies constants have been renamed in this release (compared to version 0.9.4). If you were using one of the following, you\u2019ll need to migrate these usages. We recommend to use \u201cReplace in Path\u201d in IntelliJ or Android Studio, filtering for the *.gradle.kts or *.gradle file extensions to do these replacements with ease. Note that for future versions, refreshVersions will be able to do this automatically. Here\u2019s the list of renamed dependency constants: AndroidX.coreKtx -> AndroidX.core.ktx AndroidX.coreRole -> AndroidX.core.role Square.retrofit2.adapter.retrofitJava8 -> Square.retrofit2.adapter.java8 Square.retrofit2.adapter.retrofitRxJava1 -> Square.retrofit2.adapter.rxJava1 Square.retrofit2.adapter.retrofitRxJava2 -> Square.retrofit2.adapter.rxJava2 Testing.junit.junitJupiter -> Testing.junit Testing.mockK.mockK -> Testing.mockK","title":"Dependency constants renamed"},{"location":"CHANGELOG/#changes","text":"Make the refreshVersions task cancellable during network requests. Now, only http 404 and 401 responses from repositories will be silent. Server errors (i.e. all but http 404 and 401 responses) are now reported. Network failures are now reported. There is now a connection timeout (10 seconds per request for now) An error is reported if a dependency wasn\u2019t found in any of the configured repositories. All the searched repositories are now listed if a dependency wasn\u2019t found in any of them. Only declared repositories are now looked up. (Before, refreshVersions would search all dependencies in all repositories of all modules and their buildscript, regardless of which module was declaring them.) Dependency constants in Ktor no longer uses the native suffixed artifacts (because Kotlin 1.4 drops them, as the main ones become multiplatform)","title":"Changes"},{"location":"CHANGELOG/#fixes_2","text":"Version sorting would crash if a version had a long number in it. This has now been fixed, any length of digit sequence is now supported in versions. Fix maven coordinates of several dependency constants Don\u2019t crash on repositories that are not https or file or have non password credentials. The AndroidX.test.ext.jankTestHelper constant and few other ones in Firebase.mlKit had wrong maven coordinates. This has been fixed, and tests have been added to prevent it from happening again on any dependency constant we provide.","title":"Fixes"},{"location":"CHANGELOG/#previous-releases","text":"Change log","title":"Previous releases"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 Thank you for considering a contribution! This guide explains how to: maximize the chance of your changes being accepted find the documentation to work on a Gradle plugin work on the code base and test your changes Before you start \u00b6 Check out the parent plugin: ben-manes/gradle-versions-plugin . Your feature request or bug report may be better adressed at this level. Check out the existing issues . Explain your use case and start the discussion before your submit a pull-request Writing a Gradle plugin \u00b6 If you have never worked on a Gradle plugin before, have a glimpse at the following guides Designing Gradle plugins Implementing Gradle plugins Testing Gradle plugins https://github.com/gradle-guides/gradle-site-plugin is a wonderful Gradle plugin sample demonstrating established techniques and practices for plugin development as described in the following guides: Workflow for this project \u00b6 Start IntelliJ IDEA 2018.3+ Open in IntelliJ the project from the folder composite (composite/build.gradle). From the Gradle tool window, run the tasks checkAll Tasks \u00b6 The composite module defines a number of custom tasks to simplify the workflow $ pwd buildSrcVersions/composite $ ./gradlew tasks --group=custom -q Custom tasks ------------ checkAll - Run all checks hello - Minimal task that do nothing. Useful to debug a failing build pluginTests - Run plugin unit tests publishLocally - Publish the plugin locally publishPlugins - Publishes this plugin to the Gradle Plugin portal. updateGradle - Update Gradle in all modules wrapper - Update Gradle with ./gradlew wrapper Publishing the plugin locally \u00b6 The samples are useful to test quickly how the plugin behaves, but sometimes it\u2019s best to test it into a real project. This is as easy as editing your Settings : // MY_PROJECT/settings.gradle(.kts) pluginManagement { repositories { mavenLocal() gradlePluginPortal() } } //rootProject.name = \"MY_PROJECT\" The workflow is then: change something inside the plugin Run either the task :publishLocally from composite \u2026 or the task :publishToMavenLocal from plugin Then run :refreshVersions or :buildSrcVersions inside MY_PROJECT","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Thank you for considering a contribution! This guide explains how to: maximize the chance of your changes being accepted find the documentation to work on a Gradle plugin work on the code base and test your changes","title":"Contributing"},{"location":"CONTRIBUTING/#before-you-start","text":"Check out the parent plugin: ben-manes/gradle-versions-plugin . Your feature request or bug report may be better adressed at this level. Check out the existing issues . Explain your use case and start the discussion before your submit a pull-request","title":"Before you start"},{"location":"CONTRIBUTING/#writing-a-gradle-plugin","text":"If you have never worked on a Gradle plugin before, have a glimpse at the following guides Designing Gradle plugins Implementing Gradle plugins Testing Gradle plugins https://github.com/gradle-guides/gradle-site-plugin is a wonderful Gradle plugin sample demonstrating established techniques and practices for plugin development as described in the following guides:","title":"Writing a Gradle plugin"},{"location":"CONTRIBUTING/#workflow-for-this-project","text":"Start IntelliJ IDEA 2018.3+ Open in IntelliJ the project from the folder composite (composite/build.gradle). From the Gradle tool window, run the tasks checkAll","title":"Workflow for this project"},{"location":"CONTRIBUTING/#tasks","text":"The composite module defines a number of custom tasks to simplify the workflow $ pwd buildSrcVersions/composite $ ./gradlew tasks --group=custom -q Custom tasks ------------ checkAll - Run all checks hello - Minimal task that do nothing. Useful to debug a failing build pluginTests - Run plugin unit tests publishLocally - Publish the plugin locally publishPlugins - Publishes this plugin to the Gradle Plugin portal. updateGradle - Update Gradle in all modules wrapper - Update Gradle with ./gradlew wrapper","title":"Tasks"},{"location":"CONTRIBUTING/#publishing-the-plugin-locally","text":"The samples are useful to test quickly how the plugin behaves, but sometimes it\u2019s best to test it into a real project. This is as easy as editing your Settings : // MY_PROJECT/settings.gradle(.kts) pluginManagement { repositories { mavenLocal() gradlePluginPortal() } } //rootProject.name = \"MY_PROJECT\" The workflow is then: change something inside the plugin Run either the task :publishLocally from composite \u2026 or the task :publishToMavenLocal from plugin Then run :refreshVersions or :buildSrcVersions inside MY_PROJECT","title":"Publishing the plugin locally"},{"location":"adding-dependencies/","text":"Adding dependencies \u00b6 Built-in dependencies constants \u00b6 refreshVersions provides read-to-use organized constants for select popular dependencies of the following ecosystems: Kotlin Multiplatform Kotlin/JVM Android That doesn\u2019t prevent you from using refreshVersions in a Gradle project that is not using Kotlin or is not an Android project. You can use them in any build.gradle or build.gradle.kts file. Here\u2019s an example of how it looks like in the IDE: No imports needed. Autocomplete in IDE for easy discoverability. You can see all the dependency objects in this directory . Wait, what version are those dependencies using? \u00b6 All these dependency constants specify their version as the version placeholder ( _ ), so refreshVersions can replace it seamlessly with the value defined in the versions.properties file. After adding a dependency that doesn\u2019t have its version specified in the versions.properties file yet, refreshVersions will edit it and put the most stable recent version in it on the next Gradle sync (or any other Gradle run). It will also put any less stable versions as comments, allowing you to quickly upgrade if needed. Adding Gradle plugins \u00b6 This section doesn\u2019t apply to plugins that are configured in a buildscript block (since these have their versions configured like regular dependencies), but only to those that are configured solely with a plugin id. To add such a plugin, do as usual, but do not specify the version in the build.gradle or build.gradle.kts file. Instead, set it up like so in the versions.properties file: # versions.properties plugin.com.apollographql.apollo = 2.4.1 plugin.com.squareup.sqldelight = 1.4.3 Then you can omit the plugin version in all build.gradle(.kts) of your project Kotlin // SOME_MODULE/build.gradle.kts plugins { id ( \"com.squareup.sqldelight\" ) id ( \"com.apollographql.apollo\" ) } Groovy // SOME_MODULE/build.gradle plugins { id ' com . squareup . sqldelight ' id ' com . apollographql . apollo ' } As you see, the convention is pretty simple. The key plugin.some.plugin.id sets the version of the plugin `id(\u201csome.plugin.id\u201d)\u00b4. Gradle buildSrcVersions \u00b6 Yet another approach to managing dependencies is to use the Gradle buildSrc module, and to auto-magically generate a file Libs.kt that contains all the dependencies applied to your build: /** * Generated by `$ ./gradlew buildSrcVersions` */ object Libs { const val annotation : String = \"androidx.annotation:annotation:_\" const val guava : String = \"com.google.guava:guava:_\" const val guice : String = \"com.google.inject:guice:_\" } Because this file used the placeholder version _ , it is compatible with gradle refreshVersions! This feature is not done yet, if you think we should prioritze it, please follow the issue https://github.com/jmfayard/refreshVersions/issues/235 Package Search from JetBrains \u00b6 JetBrains proposes the plugin Package Search . Package Search provides a nice UX to add a dependency Can you use it with refreshVersions? Sure, just use the version place holder _ . The libraries.gradle pattern \u00b6 An older approach to centralize dependencies is to have a libraries.gradle file // libraries.gradle ext . libraries = [ // Groovy map literal spring_core: \"org.springframework:spring-core:3.1\" , junit: \"junit:junit:4.10\" ] // MODULE/libraries.gradle apply ( from = \"../libraries.gradle\" ) dependencies { compile libraries . spring_core testCompile libraries . junit } Does that work with refreshVersions too? Yes, just use the version place holder _ ext.libraries = [ // Groovy map literal - spring_core: \"org.springframework:spring-core:3.1\", + spring_core: \"org.springframework:spring-core:_\", - junit: \"junit:junit:4.10\" + junit: \"junit:junit:_\" ]","title":"Adding Dependencies"},{"location":"adding-dependencies/#adding-dependencies","text":"","title":"Adding dependencies"},{"location":"adding-dependencies/#built-in-dependencies-constants","text":"refreshVersions provides read-to-use organized constants for select popular dependencies of the following ecosystems: Kotlin Multiplatform Kotlin/JVM Android That doesn\u2019t prevent you from using refreshVersions in a Gradle project that is not using Kotlin or is not an Android project. You can use them in any build.gradle or build.gradle.kts file. Here\u2019s an example of how it looks like in the IDE: No imports needed. Autocomplete in IDE for easy discoverability. You can see all the dependency objects in this directory .","title":"Built-in dependencies constants"},{"location":"adding-dependencies/#wait-what-version-are-those-dependencies-using","text":"All these dependency constants specify their version as the version placeholder ( _ ), so refreshVersions can replace it seamlessly with the value defined in the versions.properties file. After adding a dependency that doesn\u2019t have its version specified in the versions.properties file yet, refreshVersions will edit it and put the most stable recent version in it on the next Gradle sync (or any other Gradle run). It will also put any less stable versions as comments, allowing you to quickly upgrade if needed.","title":"Wait, what version are those dependencies using?"},{"location":"adding-dependencies/#adding-gradle-plugins","text":"This section doesn\u2019t apply to plugins that are configured in a buildscript block (since these have their versions configured like regular dependencies), but only to those that are configured solely with a plugin id. To add such a plugin, do as usual, but do not specify the version in the build.gradle or build.gradle.kts file. Instead, set it up like so in the versions.properties file: # versions.properties plugin.com.apollographql.apollo = 2.4.1 plugin.com.squareup.sqldelight = 1.4.3 Then you can omit the plugin version in all build.gradle(.kts) of your project Kotlin // SOME_MODULE/build.gradle.kts plugins { id ( \"com.squareup.sqldelight\" ) id ( \"com.apollographql.apollo\" ) } Groovy // SOME_MODULE/build.gradle plugins { id ' com . squareup . sqldelight ' id ' com . apollographql . apollo ' } As you see, the convention is pretty simple. The key plugin.some.plugin.id sets the version of the plugin `id(\u201csome.plugin.id\u201d)\u00b4.","title":"Adding Gradle plugins"},{"location":"adding-dependencies/#gradle-buildsrcversions","text":"Yet another approach to managing dependencies is to use the Gradle buildSrc module, and to auto-magically generate a file Libs.kt that contains all the dependencies applied to your build: /** * Generated by `$ ./gradlew buildSrcVersions` */ object Libs { const val annotation : String = \"androidx.annotation:annotation:_\" const val guava : String = \"com.google.guava:guava:_\" const val guice : String = \"com.google.inject:guice:_\" } Because this file used the placeholder version _ , it is compatible with gradle refreshVersions! This feature is not done yet, if you think we should prioritze it, please follow the issue https://github.com/jmfayard/refreshVersions/issues/235","title":"Gradle buildSrcVersions"},{"location":"adding-dependencies/#package-search-from-jetbrains","text":"JetBrains proposes the plugin Package Search . Package Search provides a nice UX to add a dependency Can you use it with refreshVersions? Sure, just use the version place holder _ .","title":"Package Search from JetBrains"},{"location":"adding-dependencies/#the-librariesgradle-pattern","text":"An older approach to centralize dependencies is to have a libraries.gradle file // libraries.gradle ext . libraries = [ // Groovy map literal spring_core: \"org.springframework:spring-core:3.1\" , junit: \"junit:junit:4.10\" ] // MODULE/libraries.gradle apply ( from = \"../libraries.gradle\" ) dependencies { compile libraries . spring_core testCompile libraries . junit } Does that work with refreshVersions too? Yes, just use the version place holder _ ext.libraries = [ // Groovy map literal - spring_core: \"org.springframework:spring-core:3.1\", + spring_core: \"org.springframework:spring-core:_\", - junit: \"junit:junit:4.10\" + junit: \"junit:junit:_\" ]","title":"The libraries.gradle pattern"},{"location":"code_of_conduct/","text":"Code of Conduct \u00b6 Whenever you are about to post or commit, ask yourself \u201cWould an idiot do that?\u201d And if they would, do not do that thing. https://youtu.be/KFwUcEwD4l4 Use this Code of Conduct as you like in your own projects and organizations. Q & A \u00b6 Q: What about breathing? A: The behavior must be exclusive to idiocy.","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"Whenever you are about to post or commit, ask yourself \u201cWould an idiot do that?\u201d And if they would, do not do that thing. https://youtu.be/KFwUcEwD4l4 Use this Code of Conduct as you like in your own projects and organizations.","title":"Code of Conduct"},{"location":"code_of_conduct/#q-a","text":"Q: What about breathing? A: The behavior must be exclusive to idiocy.","title":"Q &amp; A"},{"location":"faq/","text":"Common errors \u00b6 TO BE WRITTEN","title":"Common Errors"},{"location":"faq/#common-errors","text":"TO BE WRITTEN","title":"Common errors"},{"location":"migration/","text":"migration \u00b6 it\u2019s super difficult at the moment but it will be awesome soon","title":"Migration"},{"location":"migration/#migration","text":"it\u2019s super difficult at the moment but it will be awesome soon","title":"migration"},{"location":"setup/","text":"This guide will help you setting up refreshVersions in a Gradle project. Try it out with zero setup! \u00b6 The simplest way to try out gradle refreshVersions is with our official sample, the Kotlin libraries Playground! Everything is pre-configured here, so just open the project in IntelliJ and start adding and upgrading dependencies. https://github.com/LouisCAD/kotlin-libraries-playground Warning: You may also learn a ton of things about Kotlin libraries in the process! Setup \u00b6 Update Gradle \u00b6 Only Gradle 6+ is supported at the moment, because there were a lot of changes in dependencies management in Gradle 6. It also allows for a simpler setup for plugins for example. Updating Gradle is anyway usually a good idea. You get fewer bugs, more features and more build speed. This how you update: $ ./gradlew wrapper --gradle-version 6.6.1 Note that if you are on Android, you need to update the Android Gradle Plugin to its latest stable version at the same time. Gradle\u2019s Settings file \u00b6 A Gradle project has a Settings file called settings.gradle or settings.gradle.kts where you must respect a certain order: import com.example.something buildscript { // see below } pluginManagement { } plugins { } // see below rootProject . name = \"My Project\" include ( \":app\" ) Bootstrap refreshVersions \u00b6 Here is how you configure gradle refreshVersions Kotlin // settings.gradle.kts import de.fayard.refreshVersions.bootstrapRefreshVersions buildscript { repositories { gradlePluginPortal () } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7\" ) } bootstrapRefreshVersions () Groovy // settings.gradle import de.fayard.refreshVersions.RefreshVersionsSetup buildscript { repositories { gradlePluginPortal () } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7\" ) } RefreshVersionsSetup . bootstrap ( settings ) If you have a buildSrc module \u00b6 I you use the buildSrc module, you probably want to use refreshVersions there as well. Kotlin // buildSrc/settings.gradle.kts import de.fayard.refreshVersions.bootstrapRefreshVersionsForBuildSrc buildscript { repositories { gradlePluginPortal () } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7\" ) } bootstrapRefreshVersionsForBuildSrc () Groovy // buildSrc/settings.gradle import de.fayard.refreshVersions.RefreshVersionsSetup buildscript { repositories { gradlePluginPortal () } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7\" ) } RefreshVersionsSetup . bootstrapForBuildSrc ( settings ) If you have a composite / included build \u00b6 Included builds are not supported yet. If you need/want this feature, please vote with a \ud83d\udc4d on this issue to help us prioritize. Using a development version \u00b6 To use a development version, you need to find the published development versions by searching in the recent commits on the develop branch You also need to add the maven repository https://dl.bintray.com/jmfayard/maven Kotlin // settings.gradle.kts import de.fayard.refreshVersions.bootstrapRefreshVersions buildscript { repositories { gradlePluginPortal () maven ( \"https://dl.bintray.com/jmfayard/maven\" ) } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7-dev-001\" ) } bootstrapRefreshVersions () Groovy // settings.gradle import de.fayard.refreshVersions.RefreshVersionsSetup buildscript { repositories { gradlePluginPortal () maven { url 'https://dl.bintray.com/jmfayard/maven' } } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7-dev-001\" ) } RefreshVersionsSetup . bootstrap ( settings ) Run $ gradle refreshVersions \u00b6 At that point, you should be able to run $ gradle refreshVersions It won\u2019t do much though, because refreshVersions only manage the dependencies you told it to manage. Next we will see how to migrate your project","title":"Setup"},{"location":"setup/#try-it-out-with-zero-setup","text":"The simplest way to try out gradle refreshVersions is with our official sample, the Kotlin libraries Playground! Everything is pre-configured here, so just open the project in IntelliJ and start adding and upgrading dependencies. https://github.com/LouisCAD/kotlin-libraries-playground Warning: You may also learn a ton of things about Kotlin libraries in the process!","title":"Try it out with zero setup!"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#update-gradle","text":"Only Gradle 6+ is supported at the moment, because there were a lot of changes in dependencies management in Gradle 6. It also allows for a simpler setup for plugins for example. Updating Gradle is anyway usually a good idea. You get fewer bugs, more features and more build speed. This how you update: $ ./gradlew wrapper --gradle-version 6.6.1 Note that if you are on Android, you need to update the Android Gradle Plugin to its latest stable version at the same time.","title":"Update Gradle"},{"location":"setup/#gradles-settings-file","text":"A Gradle project has a Settings file called settings.gradle or settings.gradle.kts where you must respect a certain order: import com.example.something buildscript { // see below } pluginManagement { } plugins { } // see below rootProject . name = \"My Project\" include ( \":app\" )","title":"Gradle's Settings file"},{"location":"setup/#bootstrap-refreshversions","text":"Here is how you configure gradle refreshVersions Kotlin // settings.gradle.kts import de.fayard.refreshVersions.bootstrapRefreshVersions buildscript { repositories { gradlePluginPortal () } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7\" ) } bootstrapRefreshVersions () Groovy // settings.gradle import de.fayard.refreshVersions.RefreshVersionsSetup buildscript { repositories { gradlePluginPortal () } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7\" ) } RefreshVersionsSetup . bootstrap ( settings )","title":"Bootstrap refreshVersions"},{"location":"setup/#if-you-have-a-buildsrc-module","text":"I you use the buildSrc module, you probably want to use refreshVersions there as well. Kotlin // buildSrc/settings.gradle.kts import de.fayard.refreshVersions.bootstrapRefreshVersionsForBuildSrc buildscript { repositories { gradlePluginPortal () } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7\" ) } bootstrapRefreshVersionsForBuildSrc () Groovy // buildSrc/settings.gradle import de.fayard.refreshVersions.RefreshVersionsSetup buildscript { repositories { gradlePluginPortal () } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7\" ) } RefreshVersionsSetup . bootstrapForBuildSrc ( settings )","title":"If you have a buildSrc module"},{"location":"setup/#if-you-have-a-composite-included-build","text":"Included builds are not supported yet. If you need/want this feature, please vote with a \ud83d\udc4d on this issue to help us prioritize.","title":"If you have a composite / included build"},{"location":"setup/#using-a-development-version","text":"To use a development version, you need to find the published development versions by searching in the recent commits on the develop branch You also need to add the maven repository https://dl.bintray.com/jmfayard/maven Kotlin // settings.gradle.kts import de.fayard.refreshVersions.bootstrapRefreshVersions buildscript { repositories { gradlePluginPortal () maven ( \"https://dl.bintray.com/jmfayard/maven\" ) } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7-dev-001\" ) } bootstrapRefreshVersions () Groovy // settings.gradle import de.fayard.refreshVersions.RefreshVersionsSetup buildscript { repositories { gradlePluginPortal () maven { url 'https://dl.bintray.com/jmfayard/maven' } } dependencies . classpath ( \"de.fayard.refreshVersions:refreshVersions:0.9.7-dev-001\" ) } RefreshVersionsSetup . bootstrap ( settings )","title":"Using a development version"},{"location":"setup/#run-gradle-refreshversions","text":"At that point, you should be able to run $ gradle refreshVersions It won\u2019t do much though, because refreshVersions only manage the dependencies you told it to manage. Next we will see how to migrate your project","title":"Run $ gradle refreshVersions"},{"location":"updating-dependencies/","text":"Updating dependencies \u00b6 The core feature is gradle refreshVersions is that it will lookup auto-magically for available updates for all the dependencies that it manages. This is done in three small steps: 1. Run $ gradle refreshVersions \u00b6 Run the refreshVersions gradle task on the root project: $ ./gradlew refreshVersions Hint: You don\u2019t need to leave the IDE to run a Gradle task. IntelliJ has an handy action Execute Gradle Task : Gradle refreshVersions is fast: it usually takes less than 10 seconds to execute on relatively big projects. 2. Edit the versions.properties file \u00b6 Open the versions.properties file Let say you have this initial state: After you run $ ./gradle refreshVersions , you will see the available updates as comments . Why as comment? Because while googling manually for available updates is a monkey job that is best done by a computer program, deciding whether to upgrade or not is your job as a programmer. If you decide to update, just replace the previous version with the update* If you decide to not update, just delete the comments, they should be commited to your repository. 3. Sync Gradle \u00b6 The file versions.properties is part of the Gradle build. So after you have edited it, run the action Sync Project with Gradle Files At that point, you probably want to: run your unit tests do some mock tests with your app commit when you are happy.","title":"Updating Dependencies"},{"location":"updating-dependencies/#updating-dependencies","text":"The core feature is gradle refreshVersions is that it will lookup auto-magically for available updates for all the dependencies that it manages. This is done in three small steps:","title":"Updating dependencies"},{"location":"updating-dependencies/#1-run-gradle-refreshversions","text":"Run the refreshVersions gradle task on the root project: $ ./gradlew refreshVersions Hint: You don\u2019t need to leave the IDE to run a Gradle task. IntelliJ has an handy action Execute Gradle Task : Gradle refreshVersions is fast: it usually takes less than 10 seconds to execute on relatively big projects.","title":"1. Run $ gradle refreshVersions"},{"location":"updating-dependencies/#2-edit-the-versionsproperties-file","text":"Open the versions.properties file Let say you have this initial state: After you run $ ./gradle refreshVersions , you will see the available updates as comments . Why as comment? Because while googling manually for available updates is a monkey job that is best done by a computer program, deciding whether to upgrade or not is your job as a programmer. If you decide to update, just replace the previous version with the update* If you decide to not update, just delete the comments, they should be commited to your repository.","title":"2. Edit the versions.properties file"},{"location":"updating-dependencies/#3-sync-gradle","text":"The file versions.properties is part of the Gradle build. So after you have edited it, run the action Sync Project with Gradle Files At that point, you probably want to: run your unit tests do some mock tests with your app commit when you are happy.","title":"3. Sync Gradle"}]}